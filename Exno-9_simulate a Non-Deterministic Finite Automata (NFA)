#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX_STATES 10

typedef struct {
    int states[MAX_STATES];
    int count;
} StateSet;

void addState(StateSet *set, int state) {
    if (set->count < MAX_STATES) {
        set->states[set->count++] = state;
    }
}

StateSet epsilonClosure(StateSet current) {
    StateSet result = current;
    // In this NFA, there are no Îµ-transitions, so just return the current states
    return result;
}

StateSet move(StateSet current, char input) {
    StateSet next = {0};
    
    for (int i = 0; i < current.count; i++) {
        int state = current.states[i];
        
        // State transitions for our NFA
        if (state == 0 && input == '0') {
            addState(&next, 1);  // From q0 to q1 on '0'
        }
        else if (state == 1) {
            if (input == '0') {
                addState(&next, 1);  // Stay in q1 on '0'
            }
            else if (input == '1') {
                addState(&next, 2);  // From q1 to q2 (accept) on '1'
                addState(&next, 1);   // Also stay in q1 (non-deterministic)
            }
        }
        else if (state == 2) {
            // Any input from accept state goes to dead state
            addState(&next, 3);
        }
    }
    
    // If no transitions, go to dead state
    if (next.count == 0) {
        addState(&next, 3);
    }
    
    return next;
}

bool simulateNFA(const char *input) {
    StateSet current = {0};
    addState(&current, 0);  // Start in initial state q0
    
    for (int i = 0; input[i] != '\0'; i++) {
        current = epsilonClosure(current);
        current = move(current, input[i]);
    }
    
    current = epsilonClosure(current);
    
    // Check if any state is the accept state (q2)
    for (int i = 0; i < current.count; i++) {
        if (current.states[i] == 2) {
            return true;
        }
    }
    
    return false;
}

int main() {
    char input[100];
    
    printf("Enter a string (only '0' and '1' allowed): ");
    scanf("%s", input);
    
    // Validate input contains only '0' and '1'
    for (int i = 0; input[i] != '\0'; i++) {
        if (input[i] != '0' && input[i] != '1') {
            printf("Invalid input: string must contain only '0' and '1'.\n");
            return 1;
        }
    }
    
    if (simulateNFA(input)) {
        printf("The string \"%s\" is ACCEPTED by the NFA (starts with '0' and ends with '1').\n", input);
    } else {
        printf("The string \"%s\" is REJECTED by the NFA.\n", input);
    }
    
    return 0;
}
